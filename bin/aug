#!/usr/bin/env ruby
# -*- coding: utf-8 -*-

## relative path to libs
AUGER_DIR = File.dirname(File.dirname(__FILE__))

## cfg dir
AUGER_CFG = ENV['AUGER_CFG'] || File.join(AUGER_DIR, 'cfg')

require "rainbow"
require "optparse"
require "#{AUGER_DIR}/lib/auger"

options = {}
optparse = OptionParser.new do |opts|
  opts.banner = "Usage: aug [-h|--help] [-f|--fqdn] [-l|--list] cfg"

  if ARGV[0] == nil
    puts opts.banner.color(:yellow)
    exit
  end

  opts.on('-f', '--fqdn', 'Test FQDN/VIPs instead of hosts.') { options[:fqdn] = true }
  opts.on('-l', '--list', 'List available configs and exit.') do
    puts Dir["#{AUGER_CFG}/*.rb"].map {|file| File.basename(file).sub(/\.rb$/, '')}
    exit
  end
  opts.on('-h', '--help', 'Display help') do
    puts opts
    exit
  end
end
optparse.parse!


## load plugins
Dir["#{AUGER_DIR}/lib/plugins/*.rb"].each {|file| require file }

## cfg file can be e.g. 'imagine' or relative path
cfg = File.exists?(ARGV[0]) ? ARGV[0] : "#{AUGER_CFG}/#{ARGV[0]}.rb"

Auger::Config.load(cfg).projects.each do |p|

  ## max length of test names for formatting output
  max_test_length = 
    p.connections.map{|c| c.requests.map{|r| r.tests.map{|t| t.name.length}}}.flatten.max

  hostlist = options[:fqdn] ? p.fqdns : p.hosts
  
  hostlist.each do |host|
    puts "[#{host.color(:cyan)}]"

    p.connections.each do |c|

      begin 
        c.do_requests(host)
      rescue => e               # connection failure
        puts "#{c.class}:#{c.port} #{e.class}: #{e.message.color(:red)}"
      else
        results = c.do_tests
        results.flatten.each do |result|
          color = result.outcome ? :green : :red
          puts "  %+#{max_test_length}s  %-30s" % [result.test.name, result.to_s.color(color)]
        end
      end

    end

  end

end
