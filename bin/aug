#!/usr/bin/env ruby
# -*- coding: utf-8 -*-

AUGER_DIR = File.dirname(File.dirname(__FILE__))
AUGER_LIB = File.join(AUGER_DIR, 'lib')
AUGER_CFG = ENV['AUGER_CFG'] || File.join(AUGER_DIR, 'cfg')

## relative path to libs
$LOAD_PATH.unshift(AUGER_LIB) unless $LOAD_PATH.include?(AUGER_LIB)

require "rainbow"
require "optparse"
require "auger"

options = {}
optparse = OptionParser.new do |opts|
  opts.banner = "Usage: aug [-h|--help] [-f|--fqdn] [-l|--list] cfg"

  if ARGV[0] == nil
    puts opts.banner.color(:yellow)
    exit
  end

  opts.on('-f', '--fqdn', 'Test FQDN/VIPs instead of hosts.') { options[:fqdn] = true }
  opts.on('-l', '--list', 'List available configs and exit.') do
    puts Dir["#{AUGER_CFG}/*.rb"].map {|file| File.basename(file).sub(/\.rb$/, '')}
    exit
  end
  opts.on('-h', '--help', 'Display help') do
    puts opts
    exit
  end
end
optparse.parse!

## load plugins
Dir["#{AUGER_DIR}/lib/plugins/*.rb"].each {|file| require file }

## cfg file can be e.g. 'imagine' or relative path
cfg = File.exists?(ARGV[0]) ? ARGV[0] : "#{AUGER_CFG}/#{ARGV[0]}.rb"

## pretty ascii output for different result outcomes
def format_outcome(outcome)
  case outcome
  when TrueClass then
    "\u2713".color(:green)
  when MatchData then # boolean if no captures, otherwise list captures
    (outcome.captures.empty? ? "\u2713" : outcome.captures.join(' '))
      .color(:green)
  when FalseClass then
    "\u2717".color(:red)
  when NilClass then
    "nil".color(:red)
  when Exception then
    "#{outcome.class}: #{outcome.to_s}".color(:magenta)
  else
    outcome.to_s.color(:green)
  end
end

Auger::Config.load(cfg).projects.each do |p|

  ## max length of test names for formatting output
  ## -f option uses fqdn
  hosts = options[:fqdn] ? p.fqdns : p.hosts

  threads = {}
  hosts.map do |host|
    threads[host] = p.connections.map do |c|
      Thread.new do
        c.do_requests(host)
        c.requests.map { |request| request.do_tests }
      end
    end
  end
  
  max_test_length = 
    p.connections.map{|c| c.requests.map{|r| r.tests.map{|t| t.name.length}}}.flatten.max

  hosts.each do |host|
    puts "[#{host.color(:cyan)}]"
    threads[host].each do |thread| 
      results = thread.value    # this waits on thread
      results.flatten.each do |result|
        output = format_outcome(result.outcome)
        puts "  %+#{max_test_length}s  %-30s" % [result.test.name, output]
      end
    end
  end
end
