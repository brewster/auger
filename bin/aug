#!/usr/bin/env ruby
# -*- coding: utf-8 -*-

require 'rainbow/ext/string'
require 'optparse'

AUGER_DIR = File.dirname(File.dirname(__FILE__))
AUGER_LIB = File.join(AUGER_DIR, 'lib')
AUGER_CFG = (ENV['AUGER_CFG'] || File.join(AUGER_DIR, 'cfg')).split(File::PATH_SEPARATOR)

## relative path to libs (in case not installed as a gem)
$LOAD_PATH.unshift(AUGER_LIB) unless $LOAD_PATH.include?(AUGER_LIB)
require 'auger'

## set opts
options = {}
OptionParser.new do |opts|
  opts.banner = "Usage: aug [-h|--help] [-l|--list] [-v|--verbose] [-V|--version] cfg"

  if ARGV[0] == nil
    puts opts.banner.color(:yellow)
    exit
  end

  opts.on('-h', '--help', 'Display help') do
    puts opts
    exit
  end

  opts.on('-V', '--version', 'Display version and exit.') do
    puts Auger::VERSION
    exit
  end

  opts.on('-l', '--list', 'List available configs and exit.') do
    puts(AUGER_CFG.map do |dir|
           Dir["#{dir}/*.rb"].map{ |file| File.basename(file).sub(/\.rb$/, '') } 
         end.flatten.sort)
    exit
  end

  opts.on('-T', '--tunnel [USER@]HOST', 'Set a [user@]host to use as ssh tunnel.') do |t|
    options[:tunnel] = t
  end

  opts.on('-v', '--verbose', 'Display error backtraces.') do
    options[:verbose] = true
  end

  opts.on('-s', '--single-thread', 'Do not fork when running tests.') do
    options[:single_thread] = true
  end

end.parse!

## load plugins
Dir["#{File.dirname(File.dirname(__FILE__))}/lib/plugins/*.rb"].each { |file| require file }

def runner(options)
  if options[:single_thread]
    yield
  else
    Process.fork do
      yield
    end
  end
end

## find cfg in path, or just use local file
cfg = AUGER_CFG.map do |path|
  File.join(path, "#{ARGV[0]}.rb")
end.find do |file|
  File.exists?(file)
end || ARGV[0]

## load config file and loop projects
Auger::Config.load(cfg).projects.each do |project|

  servers = project.servers.map do |server|
    server.options[:tunnel] = options[:tunnel]

    pipes = project.connections(*server.roles).map do |connection|
      read, write = IO.pipe

      runner(options) do
        conn = connection.try_open(server)

        responses = connection.requests.map do |request|
          response, time = request.try_run(conn)
          request.tests.map do |test|
            [ test.name, test.run(response).format ]
          end
        end

        Marshal.dump(responses, write)
        connection.try_close(conn)
      end

      write.close               # parent does not need
      read                      # return the pipe
    end

    [ server, pipes ]           # return server and its read pipes
  end

  Process.waitall

  ## width of test name column
  max_test_length = project.tests.map { |test| test.name.length }.max

  ## print results
  failed = false
  servers.each do |server, pipes|
    puts "[#{server.name.color(:cyan)}]"

    pipes.each do |pipe|
      Marshal.load(pipe).flatten(1).each do |test, result|
        if !failed && !result.include?("âœ“")
          failed = true
        end
        puts "  %+#{max_test_length}s  %-30s" % [ test, result ]
      end
    end
  end

  exit(failed ? 1 : 0)
end
